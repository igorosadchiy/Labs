!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);n(1),n(2)},function(t,e){const n="https://www.omdbapi.com/?apikey=fd58e48d",r=document.forms.search_form,o=r.querySelector(".alert-message"),i=document.getElementsByClassName("nav-item")[0],a=document.getElementsByClassName("nav-item")[1],s=document.querySelector(".background-wrap"),l=10;let c=1;function u(t,e){"use strict";e?t.classList.add("visible"):t.classList.remove("visible")}function d(t){"use strict";if("False"===t.Response)return o.classList.remove("text-success"),o.classList.add("text-danger"),o.innerHTML="Not Found!",void u(o,!0);const e=t.Search,n=JSON.stringify(localStorage),i=t.totalResults;let a=[],m="";o.classList.remove("text-danger"),o.classList.add("text-success"),o.innerHTML=`Found ${i} movies`,u(o,!0);for(var v=0;v<e.length;v++)m=n.indexOf(e[v].imdbID)>0?"active":"",a.push(f(e[v].imdbID,e[v].Poster,e[v].Title,e[v].Year,m));s.classList.add("invisible"),document.getElementById("card-container").innerHTML=a.join(""),function(t){let e=Math.ceil(t/l);const n=[];for(let t=1;t<=e;t++)n.push(`<li class="page-item"><a class="page-link" href="${t}">${t}</a></li>`);const o=`\n        <nav aria-label="Page navigation example">\n            <ul class="pagination">\n                ${n.join("")}\n            </ul>\n        </nav>`;document.getElementById("paginationContainer").innerHTML=o,document.getElementById("paginationContainer").querySelectorAll("li a").forEach(t=>{t.addEventListener("click",e=>{e.preventDefault();const n=t.getAttribute("href");c=n,function(){const t=r.title.value.trim(),e=r.searchType.value;fetch(`${URL}&s=${t}&type=${e}&page=${c}`).then(t=>t.json()).then(d)}()})})}(i),p()}function f(t,e,n,r,o){"use strict";return"N/A"===e&&(e="img/no-image.png"),`\n\t\t<div class="card m-2">\n\t\t\t<a href="#" class="poster-wrap" data-id="${t}" title="Click to more info" >\n\t\t\t\t<img src="${e}" alt="" class="card-img-top">\n\t\t\t</a>\n\t\t\t<div class="card-body">\n\t\t\t\t<h5 class="card-title">${n}</h5>\n\t\t\t\t<ul class="list-group list-group-flush">\n\t\t\t\t\t<li class="list-group-item"><b>Year:</b> ${r}</li>\n\t\t\t\t</ul>\n\t\t\t\t<button type="button" class="btn-more-info btn btn-primary mt-3" data-id="${t}">More info</button>\n\t\t\t\t<button type="button" class="btn-favorite btn btn-outline-warning mt-3 float-right ${o}" id="${t}" data-id="${t}"><i class="fa fa-star-o"></i></button>\n\t\t\t</div>\n\t\t</div>\n\t`}function p(){"use strict";const t=[document.querySelectorAll(".btn-more-info"),document.querySelectorAll(".poster-wrap"),document.querySelectorAll(".btn-favorite")];for(let n=0;n<t.length;n++)e(t[n],n);function e(t,e){t.forEach(t=>{const r=t.dataset.id;2===e?t.addEventListener("click",()=>{JSON.stringify(localStorage).indexOf(r)>0?(localStorage.removeItem(r),t.classList.remove("active")):(localStorage.setItem(r,"id"),t.classList.add("active"))}):t.addEventListener("click",()=>{fetch(`${n}&i=${r}&plot=full`).then(t=>t.json()).then(t=>(function(t){const e=["Released","Genre","Country","Director","Actors","Runtime","Language","Production","Website","BoxOffice","imdbRating","imdbVotes"];let n="",r="";let o="";JSON.stringify(localStorage).indexOf(t.imdbID)>0&&(o="active");for(let o=0;o<e.length;o++)"N/A"!==t.Plot&&(n=`<ul class="list-group list-group-flush">\n\t\t\t\t  \t\t<li class="list-group-item text-justify">${t.Plot}</li>\n\t\t\t  \t\t</ul>`),"N/A"!==t[e[o]]&&void 0!==t[e[o]]&&(r+="Website"===e[o]?`<li class="modal-description ml-4 mb-1 small text-truncate"><strong>${e[o]}:</strong> <a href="${t[e[o]]}" target="_blank">${t[e[o]]}</a></li>`:`<li class="modal-description ml-4 mb-1 small"><strong>${e[o]}:</strong> ${t[e[o]]}</li>`);const i=`\n\t  <div class="modal-header">\n        <h5 class="modal-title" id="ModalTitle">${t.Title}</h5>\n        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n          <span aria-hidden="true">Ã—</span>\n        </button>\n      </div>\n      <div class="modal-body d-flex flex-row align-items-start flex-sm-nowrap flex-wrap">\n\t\t  <img src="${t.Poster}" alt="" class="modal-poster w-100">\n\t\t  <div class="modal-about w-100">\n\t\t\t  ${n}\n\t\t\t<ul class="modal-description-group list-unstyled mt-2">\n\t\t\t  ${r}\n\t\t\t</ul>\n\t\t  </div>\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>\n        <button type="button" class="btn-modal-favorite btn btn-outline-warning ${o}" data-id="${t.imdbID}"><i class="fa fa-star-o"></i> Favorites</button>\n      </div>\n\t`;document.getElementsByClassName("modal-content")[0].innerHTML=i,function(){const t=document.querySelector(".btn-modal-favorite"),e=t.dataset.id;t.addEventListener("click",()=>{JSON.stringify(localStorage).indexOf(e)>0?(localStorage.removeItem(e),t.classList.remove("active"),document.getElementById(e).classList.remove("active")):(localStorage.setItem(e,"id"),t.classList.add("active"),document.getElementById(e).classList.add("active"))})}(),$("#modalMoreInfo").modal("show")})(t))})})}}r.addEventListener("submit",t=>{"use strict";t.preventDefault(),c=1;const e=r.title.value.trim(),l=r.typeCheck.value;e?(i.classList.add("active"),a.classList.remove("active"),s.classList.remove("invisible"),fetch(`${n}&s=${e}&type=${l}&page=${c}`).then(t=>t.json()).then(t=>d(t))):(r.title.classList.add("error"),o.classList.add("text-danger"),o.innerHTML="This field is required!",u(o,!0))}),r.title.addEventListener("focus",t=>{"use strict";t.preventDefault(),o.classList.value.indexOf("text-danger")>0&&(r.title.classList.remove("error"),o.classList.remove("text-danger"),u(o,!1))}),function(){"use strict";a.addEventListener("click",()=>{event.preventDefault(),i.classList.remove("active"),a.classList.add("active"),function(){let t=0,e=[];for(var r in localStorage)"id"===localStorage[r]&&i(r);function i(r){fetch(`${n}&i=${r}&plot=full`).then(t=>t.json()).then(t=>{e.push(f(t.imdbID,t.Poster,t.Title,t.Year,"active")),s.classList.add("invisible"),document.getElementById("card-container").innerHTML=e.join(""),p()}),t++}o.classList.remove("text-danger"),o.classList.add("text-success"),o.innerHTML=`Found ${t} favorite movies`,u(o,!0)}()})}()},function(t,e,n){var r=n(3);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,".navbar {box-shadow: 0px 3px 8px 0px #007bff;}\r\n.error {background-color: coral !important;}\r\n.error::-webkit-input-placeholder {color: white !important;}\r\n.error::-moz-placeholder {color: white !important;}\r\n.visible {display: block !important;}\r\n\r\n.alert-message {\r\n\tposition: absolute;\r\n\tdisplay: none;\r\n\tfont-weight: bold;\r\n\twidth: 100%;\r\n\tbottom: -35px;\r\n\tright: 16px;\r\n\ttext-align: right;\r\n\tfont-size: 1em;\r\n}\r\n\r\n.header {position: relative;}\r\n\r\n.background-wrap::before {\r\n\tcontent: '';\r\n\tposition: absolute;\r\n\theight: calc(100vh - 70px);\r\n\ttop: 70px;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom:0;\r\n\tz-index: -1;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground: url(../public/img/background.jpg);\r\n\tbackground-size: cover;\r\n\tbackground-position: center;\r\n\topacity: .2;\r\n\tanimation: show-bg 2s linear;\r\n}\r\n\r\n@keyframes show-bg {\r\n\tfrom {opacity: 0;}\r\n\tto {opacity: .2;}\r\n}\r\n\r\n.background-wrap::after {\r\n\tcontent: '';\r\n\tposition: absolute;\r\n\theight: calc(100vh - 74px);\r\n\twidth: 90%;\r\n\ttop: 74px;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom:0;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground: url(../public/img/IMDB_Logo_2016.svg) no-repeat;\r\n\tbackground-size: contain;\r\n\tbackground-position: center;\r\n\topacity: .3;\r\n\tanimation: transform-bg 4s linear;\r\n}\r\n\r\n@keyframes transform-bg {\r\n\t0% {\r\n\t\topacity: 0;\r\n\t\ttransform: scale(0);\r\n\t}\r\n\t30% {\r\n\t\topacity: 0;\r\n\t\ttransform: scale(0);\r\n\t}\r\n\t100% {\r\n\t\topacity: .3;\r\n\t\ttransform: scale(1);\r\n\t}\r\n}\r\n\r\n.card {\r\n\twidth: 14rem;\r\n\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n}\r\n\r\n.card-img-top {height: 20rem;}\r\n.card-title {height: 48px;}\r\n.poster-wrap {position: relative;}\r\n.poster-wrap:hover::after {opacity: 1;}\r\n.poster-wrap::after {\r\n\tcontent: '';\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tbackground: rgba(0,0,0,.5);\r\n\topacity: 0;\r\n\ttransition: opacity .3s ease;\r\n}\r\n\r\n.modal-dialog {\r\n\tmax-width: 800px !important;\r\n}\r\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),a=null,s=0,l=[],c=n(6);function u(t,e){for(var n=0;n<t.length;n++){var o=t[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(b(o.parts[a],e))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],e));r[o.id]={id:o.id,refs:1,parts:s}}}}function d(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function f(t,e){var n=i(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function m(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),v(e,t.attrs),f(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function b(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var l=s++;n=a||(a=m(e)),r=h.bind(null,n,l,!1),o=h.bind(null,n,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),f(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return u(n,e),function(t){for(var o=[],i=0;i<n.length;i++){var a=n[i];(s=r[a.id]).refs--,o.push(s)}t&&u(d(t,e),e);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var g=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function h(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,