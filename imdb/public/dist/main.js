!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);n(1),n(2)},function(t,e){const n="https://www.omdbapi.com/?apikey=fd58e48d",r=document.forms.search_form,i=r.querySelector(".alert-message"),o=document.getElementsByClassName("nav-item")[0],a=document.getElementsByClassName("nav-item")[1],s=document.querySelector(".background-wrap"),l=document.querySelectorAll(".paginationContainer"),c=document.getElementById("card-container");var u=r.title.value.trim(),d=r.typeCheck.value;const f=10;var p=1;function m(t){"use strict";if(s.classList.add("invisible"),"False"===t.Response)return i.classList.remove("text-success"),i.classList.add("text-danger"),i.innerHTML="Not Found!",i.classList.remove("invisible"),l.forEach(t=>{t.innerHTML=""}),void(c.innerHTML="");const e=t.Search,r=JSON.stringify(localStorage),o=t.totalResults;let a=[],g="";i.classList.remove("text-danger"),i.classList.add("text-success"),i.innerHTML=`Found ${o} movies`,i.classList.remove("invisible");for(var h=0;h<e.length;h++)g=r.indexOf(e[h].imdbID)>0?"active":"",a.push(v(e[h].imdbID,e[h].Poster,e[h].Title,e[h].Year,g));c.innerHTML=a.join(""),b(),l.forEach(t=>{t.innerHTML=""}),o>10&&function(t){const e=[];let r=Math.ceil(t/f),i=`<li class="page-item"><a class="page-link" href="${p-1}">Previous</a></li>`,o=`<li class="page-item"><a class="page-link" href="${p+1}">Next</a></li>`;1===p?i='<li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>':p===r&&(o='<li class="page-item disabled"><a class="page-link" href="#">Next</a></li>');const a=function(t,e,n){return Array(n+1).join("1").split("").map(function(t,e){return e+1}).filter(function(r){return!e||(1===r||r===t||r===n||r<=t+e&&r>=t-e)})}(p,2,r);for(var s=0;s<a.length;s++)a[s]===p?e.push(`<li class="page-item active"><a class="page-link href="#" style="pointer-events: none;">${a[s]}</a></li>`):(e.push(`<li class="page-item"><a class="page-link" href="${a[s]}">${a[s]}</a></li>`),a[s+1]-a[s]>1&&e.push('<li class="page-item disabled"><a class="page-link href="#" style="pointer-events: none;">...</a></li>'));const c=`\n    <nav aria-label="Search results pages">\n        <ul class="pagination pagination-sm">\n            ${i}\n            ${e.join("")}\n            ${o}\n        </ul>\n    </nav>`;l.forEach(t=>{t.innerHTML=c,t.querySelectorAll("li a").forEach(t=>{a[s]!==p&&t.addEventListener("click",e=>{e.preventDefault(),p=+t.getAttribute("href"),function(){fetch(`${n}&s=${u}&type=${d}&page=${p}`).then(t=>t.json()).then(t=>m(t))}()})})})}(o)}function v(t,e,n,r,i){"use strict";return"N/A"===e&&(e="img/no-image.png"),`\n        <div class="card m-2">\n            <a href="#" class="poster-wrap" data-id="${t}" title="Click to more info">\n                <img src="${e}" alt="" class="card-img-top" onerror="this.src = 'img/no-image.png'">\n            </a>\n            <div class="card-body d-flex flex-column justify-content-between">\n                <h5 class="card-title">${n}</h5>\n                <ul class="list-group list-group-flush">\n                    <li class="list-group-item"><b>Year:</b> ${r}</li>\n                </ul>\n                <div class="card-foot">\n                    <button type="button" class="btn-more-info btn btn-primary mt-3" data-id="${t}">More info</button>\n                    <button type="button" class="btn-favorite btn btn-outline-warning mt-3 float-right ${i}" id="${t}" data-id="${t}"><i class="fa fa-star-o"></i></button>\n                </div>\n            </div>\n        </div>`}function b(){"use strict";const t=[document.querySelectorAll(".btn-more-info"),document.querySelectorAll(".poster-wrap"),document.querySelectorAll(".btn-favorite")];for(let n=0;n<t.length;n++)e(t[n],n);function e(t,e){t.forEach(t=>{const r=t.dataset.id;2===e?t.addEventListener("click",()=>{JSON.stringify(localStorage).indexOf(r)>0?(localStorage.removeItem(r),t.classList.remove("active")):(localStorage.setItem(r,"id"),t.classList.add("active"))}):t.addEventListener("click",()=>{fetch(`${n}&i=${r}&plot=full`).then(t=>t.json()).then(t=>(function(t){const e=["Released","Genre","Country","Director","Actors","Runtime","Language","Production","Website","BoxOffice","imdbRating","imdbVotes"];let n="",r="";let i="";JSON.stringify(localStorage).indexOf(t.imdbID)>0&&(i="active");for(let i=0;i<e.length;i++)"N/A"!==t.Plot&&(n=`\n            <ul class="list-group list-group-flush">\n                <li class="list-group-item text-justify">${t.Plot}</li>\n            </ul>`),"N/A"!==t[e[i]]&&void 0!==t[e[i]]&&(r+="Website"===e[i]?`<li class="modal-description ml-4 mb-1 small text-truncate"><strong>${e[i]}:</strong> <a href="${t[e[i]]}" target="_blank">${t[e[i]]}</a></li>`:`<li class="modal-description ml-4 mb-1 small"><strong>${e[i]}:</strong> ${t[e[i]]}</li>`);const o=`\n    <div class="modal-header">\n        <h5 class="modal-title" id="ModalTitle">${t.Title}</h5>\n        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n            <span aria-hidden="true">Ã—</span>\n        </button>\n    </div>\n    <div class="modal-body d-flex flex-row align-items-start flex-sm-nowrap flex-wrap justify-content-center">\n        <img src="${t.Poster}" alt="" class="modal-poster w-100" onerror="this.classList.remove('w-100')">\n        <div class="modal-about w-100">\n            ${n}\n            <ul class="modal-description-group list-unstyled mt-2">\n                ${r}\n            </ul>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>\n        <button type="button" class="btn-modal-favorite btn btn-outline-warning ${i}" data-id="${t.imdbID}"><i class="fa fa-star-o"></i> Favorites</button>\n    </div>`;document.getElementsByClassName("modal-content")[0].innerHTML=o,function(){const t=document.querySelector(".btn-modal-favorite"),e=t.dataset.id,n=document.getElementById(e);t.addEventListener("click",()=>{JSON.stringify(localStorage).indexOf(e)>0?(localStorage.removeItem(e),t.classList.remove("active"),n.classList.remove("active")):(localStorage.setItem(e,"id"),t.classList.add("active"),n.classList.add("active"))})}(),$("#modalMoreInfo").modal("show")})(t))})})}}[o,document.querySelector(".navbar-brand")].forEach(t=>{"use strict";t.addEventListener("click",()=>{o.classList.add("active"),a.classList.remove("active"),c.innerHTML="",l.forEach(t=>{t.innerHTML=""}),r.title.value="",i.classList.add("invisible"),s.classList.remove("display-none")})}),a.addEventListener("click",()=>{"use strict";o.classList.remove("active"),a.classList.add("active"),s.classList.add("display-none"),c.innerHTML="",l.forEach(t=>{t.innerHTML=""}),r.title.value="",function(){let t=0,e=[];for(var r in localStorage)"id"===localStorage[r]&&o(r);function o(r){fetch(`${n}&i=${r}&plot=full`).then(t=>t.json()).then(t=>{e.push(v(t.imdbID,t.Poster,t.Title,t.Year,"active")),c.innerHTML=e.join(""),b()}),t++}i.classList.remove("text-danger"),i.classList.add("text-success"),i.innerHTML=`Found ${t} favorite movies`,i.classList.remove("invisible")}()}),r.addEventListener("submit",t=>{"use strict";t.preventDefault(),p=1,u=r.title.value.trim(),d=r.typeCheck.value,u?(o.classList.add("active"),a.classList.remove("active"),fetch(`${n}&s=${u}&type=${d}&page=${p}`).then(t=>t.json()).then(t=>m(t))):(r.title.classList.add("error"),i.classList.add("text-danger"),i.innerHTML="This field is required!",i.classList.remove("invisible"))}),r.title.addEventListener("focus",()=>{"use strict";i.classList.value.indexOf("text-danger")>0&&(r.title.classList.remove("error"),i.classList.remove("text-danger"),i.classList.add("invisible"))})},function(t,e,n){var r=n(3);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,".navbar {box-shadow: 0px 3px 8px 0px #007bff;}\r\n.error {background-color: coral !important;}\r\n.error::-webkit-input-placeholder {color: white !important;}\r\n.error::-moz-placeholder {color: white !important;}\r\n\r\n.display-none {\r\n    display: none;\r\n}\r\n\r\n.alert-message {\r\n\tposition: absolute;\r\n\tfont-weight: bold;\r\n\twidth: 100%;\r\n\tbottom: -35px;\r\n\tright: 16px;\r\n\ttext-align: right;\r\n\tfont-size: 1em;\r\n}\r\n\r\n.background-wrap {position: relative;}\r\n\r\n.background-wrap::before {\r\n\tcontent: '';\r\n\tposition: absolute;\r\n\theight: calc(100vh - 66px);\r\n\ttop: -48px;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom:0;\r\n\tz-index: -1;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground: url(../public/img/background.jpg);\r\n\tbackground-size: cover;\r\n\tbackground-position: center;\r\n\topacity: .2;\r\n\tanimation: show-bg 2s linear;\r\n}\r\n\r\n/*@keyframes show-bg {\r\n\tfrom {opacity: 0;}\r\n\tto {opacity: .2;}\r\n}*/\r\n\r\n.background-wrap:enabled {\r\n    animation: show-bg 2s linear;\r\n}\r\n\r\n.background-wrap::after {\r\n\tcontent: '';\r\n\tposition: absolute;\r\n\theight: calc(100vh - 70px);\r\n\twidth: 90%;\r\n\ttop: -44px;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom:0;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground: url(../public/img/IMDB_Logo_2016.svg) no-repeat;\r\n\tbackground-size: contain;\r\n\tbackground-position: center;\r\n\topacity: .3;\r\n\tanimation: transform-bg 4s linear;\r\n}\r\n\r\n@keyframes transform-bg {\r\n\t0% {\r\n\t\topacity: 0;\r\n\t\ttransform: scale(0);\r\n\t}\r\n\t30% {\r\n\t\topacity: 0;\r\n\t\ttransform: scale(0);\r\n\t}\r\n\t100% {\r\n\t\topacity: .3;\r\n\t\ttransform: scale(1);\r\n\t}\r\n}\r\n\r\n.card {\r\n\twidth: 14rem;\r\n\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n}\r\n\r\n.card-img-top {height: 20rem;}\r\n.card-title {flex-grow: 1;}\r\n.poster-wrap {position: relative;}\r\n.poster-wrap:hover::after {opacity: 1;}\r\n.poster-wrap::after {\r\n\tcontent: '';\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tbackground: rgba(0,0,0,.5);\r\n\topacity: 0;\r\n\ttransition: opacity .3s ease;\r\n}\r\n\r\n.modal-dialog {\r\n\tmax-width: 800px !important;\r\n}\r\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r={},i=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),o=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),a=null,s=0,l=[],c=n(6);function u(t,e){for(var n=0;n<t.length;n++){var i=t[n],o=r[i.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](i.parts[a]);for(;a<i.parts.length;a++)o.parts.push(b(i.parts[a],e))}else{var s=[];for(a=0;a<i.parts.length;a++)s.push(b(i.parts[a],e));r[i.id]={id:i.id,refs:1,parts:s}}}}function d(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],a=e.base?o[0]+e.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function f(t,e){var n=o(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,i)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function m(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),v(e,t.attrs),f(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function b(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var l=s++;n=a||(a=m(e)),r=h.bind(null,n,l,!1),i=h.bind(null,n,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),f(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=c(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),i=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){p(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return u(n,e),function(t){for(var i=[],o=0;o<n.length;o++){var a=n[o];(s=r[a.id]).refs--,i.push(s)}t&&u(d(t,e),e);for(o=0;o<i.length;o++){var s;if(0===(s=i[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var g=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function h(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,